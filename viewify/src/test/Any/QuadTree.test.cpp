// Copyright ii887522

#include "QuadTree.test.h"
#include <cassert>
#include <vector>
#include "../../main/Struct/Rect.h"
#include "../../main/Struct/Point.h"
#include "../../main/Struct/Size.h"
#include "../../main/Any/QuadTree.h"

using std::vector;

namespace ii887522::viewify {

static void testIsAnyRectHit() {
  {
    QuadTree quadTree{ Rect{ Point{ 0.f, 0.f }, Size{ 16.f, 16.f } } };
    quadTree.add(vector<Rect<float>>{ });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 1.f, 1.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 14.f, 1.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 1.f, 14.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 14.f, 14.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }, Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }, Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 4.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 10.f, 10.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{
      Rect{ Point{ 0.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 0.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 1.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 2.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 0.f, 2.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 2.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 2.f, 2.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 2.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 0.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 3.f }, Size{ 1.f, 1.f } }
      });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 13.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 10.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 10.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 1.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 4.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 6.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 10.f, 10.f }, Size{ 5.f, 5.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 1.f, 0.f }, Size{ 16.f, 16.f } } };
    quadTree.add(vector<Rect<float>>{ });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 1.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 15.f, 1.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 14.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 15.f, 14.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }, Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }, Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 5.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 5.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 10.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{
      Rect{ Point{ 1.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 1.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 3.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 2.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 2.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 3.f, 2.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 0.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 2.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 1.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 3.f }, Size{ 1.f, 1.f } }
      });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 1.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 13.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 5.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 7.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 10.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 3.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 15.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 1.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 4.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 5.f, 10.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 6.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 10.f }, Size{ 5.f, 5.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 1.f, 1.f }, Size{ 16.f, 16.f } } };
    quadTree.add(vector<Rect<float>>{ });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 2.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 15.f, 2.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 15.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 13.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 15.f, 15.f }, Size{ 1.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 13.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 13.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }, Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 11.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 13.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }, Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 11.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 5.f, 11.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 13.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 5.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
    quadTree.add(vector{
      Rect{ Point{ 1.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 2.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 2.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 3.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 2.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 1.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 3.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 3.f, 3.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 1.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 2.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 3.f }, Size{ 1.f, 1.f } },
      Rect{ Point{ 1.f, 4.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 2.f, 4.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 3.f, 4.f }, Size{ 1.f, 1.f } }, Rect{ Point{ 4.f, 4.f }, Size{ 1.f, 1.f } }
      });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 15.f, 3.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 15.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 2.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 11.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 14.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 17.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 5.f, 11.f }, Size{ 3.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 8.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 3.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 18.f, 18.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 3.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 13.f, 3.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 3.f, 13.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 16.f, 16.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 2.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 5.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 17.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 12.f }, Size{ 5.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 11.f, 17.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 5.f, 11.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 7.f, 7.f }, Size{ 5.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 11.f, 11.f }, Size{ 5.f, 5.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 0.f, 0.f }, Size{ 32.f, 16.f } } };
    quadTree.add(vector<Rect<float>>{ });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 1.f }, Size{ 2.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 28.f, 1.f }, Size{ 2.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 14.f }, Size{ 2.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 14.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 12.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 28.f, 14.f }, Size{ 2.f, 1.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 14.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 12.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 14.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 12.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }, Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 14.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 10.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 16.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 12.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 10.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 16.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }, Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 14.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 10.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 16.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 10.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 10.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 12.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 10.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 16.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 10.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 10.f }, Size{ 10.f, 5.f } }));
    quadTree.add(vector{
      Rect{ Point{ 0.f, 0.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 2.f, 0.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 0.f, 1.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 2.f, 1.f }, Size{ 2.f, 1.f } },
      Rect{ Point{ 4.f, 0.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 4.f, 1.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 0.f, 2.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 2.f, 2.f }, Size{ 2.f, 1.f } },
      Rect{ Point{ 4.f, 2.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 6.f, 0.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 6.f, 1.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 6.f, 2.f }, Size{ 2.f, 1.f } },
      Rect{ Point{ 0.f, 3.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 2.f, 3.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 4.f, 3.f }, Size{ 2.f, 1.f } }, Rect{ Point{ 6.f, 3.f }, Size{ 2.f, 1.f } }
      });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 2.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 14.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 1.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 10.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 13.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 16.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 10.f }, Size{ 6.f, 3.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 7.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 10.f }, Size{ 6.f, 3.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 17.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 4.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 2.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 12.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 15.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 1.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 4.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 6.f }, Size{ 6.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 10.f }, Size{ 6.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 11.f }, Size{ 10.f, 5.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 16.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 10.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 6.f }, Size{ 10.f, 5.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 10.f }, Size{ 10.f, 5.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 0.f, 0.f }, Size{ 32.f, 32.f } } };
    quadTree.add(vector<Rect<float>>{ });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 2.f }, Size{ 2.f, 2.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{ Rect{ Point{ 28.f, 2.f }, Size{ 2.f, 2.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 28.f }, Size{ 2.f, 2.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 28.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 24.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{ Rect{ Point{ 28.f, 28.f }, Size{ 2.f, 2.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 28.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 24.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{ Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 28.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 24.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{ Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }, Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 28.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 20.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 32.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 24.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 20.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 32.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{ Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }, Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } } });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 28.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 20.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 32.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 20.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 20.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 24.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 20.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 32.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 20.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 20.f }, Size{ 10.f, 10.f } }));
    quadTree.add(vector{
      Rect{ Point{ 0.f, 0.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 2.f, 0.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 0.f, 2.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 2.f, 2.f }, Size{ 2.f, 2.f } },
      Rect{ Point{ 4.f, 0.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 4.f, 2.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 0.f, 4.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 2.f, 4.f }, Size{ 2.f, 2.f } },
      Rect{ Point{ 4.f, 4.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 6.f, 0.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 6.f, 2.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 6.f, 4.f }, Size{ 2.f, 2.f } },
      Rect{ Point{ 0.f, 6.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 2.f, 6.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 4.f, 6.f }, Size{ 2.f, 2.f } }, Rect{ Point{ 6.f, 6.f }, Size{ 2.f, 2.f } }
      });
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 28.f, 4.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 28.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 2.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 26.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 20.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 26.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 32.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 8.f, 20.f }, Size{ 6.f, 6.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 14.f, 14.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 20.f }, Size{ 6.f, 6.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 34.f, 34.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 4.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 24.f, 4.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 4.f, 24.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 30.f, 30.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 2.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 8.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 22.f, 12.f }, Size{ 6.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 32.f, 20.f }, Size{ 6.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 22.f }, Size{ 10.f, 10.f } }));
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 20.f, 32.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 2.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 8.f, 20.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 12.f, 12.f }, Size{ 10.f, 10.f } }));
    assert(quadTree.isAnyRectHit(Rect{ Point{ 20.f, 20.f }, Size{ 10.f, 10.f } }));
  }
}  // NOLINT(readability/fn_size)

static void testClear() {
  {
    QuadTree quadTree{ Rect{ Point{ 0.f, 0.f }, Size{ 16.f, 16.f } } };
    quadTree.clear();
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 0.f, 0.f }, Size{ 16.f, 16.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 1.f, 0.f }, Size{ 16.f, 16.f } } };
    quadTree.clear();
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 0.f }, Size{ 16.f, 16.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 1.f, 1.f }, Size{ 16.f, 16.f } } };
    quadTree.clear();
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 1.f, 1.f }, Size{ 16.f, 16.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 0.f, 0.f }, Size{ 32.f, 16.f } } };
    quadTree.clear();
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 0.f, 0.f }, Size{ 32.f, 16.f } }));
  }
  {
    QuadTree quadTree{ Rect{ Point{ 0.f, 0.f }, Size{ 32.f, 32.f } } };
    quadTree.clear();
    assert(!quadTree.isAnyRectHit(Rect{ Point{ 0.f, 0.f }, Size{ 32.f, 32.f } }));
  }
}

void testQuadTree() {
  testIsAnyRectHit();
  testClear();
}

}  // namespace ii887522::viewify
